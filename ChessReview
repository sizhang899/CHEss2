import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.FileReader;

public class ChessReview extends JFrame implements ActionListener {//same everything except action listener gets moves from file not input
    String MovingPString[];
    Peice MovingPeice;
    int MovingXpos;
    int MovingYpos;
    int skips = 0;

    private static final int BOARD_SIZE = 8;
    private static final int SQUARE_SIZE = 100;

    private final JFrame frame;
    private final JButton[][] squares;
    private final String[][] boardState;
    Rook wRook1 = new Rook("♜", 1, 0, 0,  "b");
    Knight wKnight1 = new Knight("♞", 1, 1, 0,  "b");
    Bishop wBishop1 = new Bishop("♝", 1, 2, 0,  "b");
    Queen wQueen = new Queen("♛", 1, 3, 0,  "b");
    King wKing = new King("♚", 1, 4, 0,  "b");
    Bishop wBishop2 = new Bishop("♝", 2, 5, 0,  "b");
    Knight wKnight2 = new Knight("♞", 2, 6, 0,  "b");
    Rook wRook2 = new Rook("♜", 2, 7, 0,  "b");

    Peice wPawn1 = new Pawn("♟", 1, 0, 1,  "b");
    Peice wPawn2 = new Pawn("♟", 2, 1, 1,  "b");
    Peice wPawn3 = new Pawn("♟", 3, 2, 1,  "b");
    Peice wPawn4 = new Pawn("♟", 4, 3, 1,  "b");
    Peice wPawn5 = new Pawn("♟", 5, 4, 1,  "b");
    Peice wPawn6 = new Pawn("♟", 6, 5, 1,  "b");
    Peice wPawn7 = new Pawn("♟", 7, 6, 1,  "b");
    Peice wPawn8 = new Pawn("♟", 8, 7, 1,  "b");

    Rook bRook1 = new Rook("♖", 1, 0, 7,  "w");
    Knight bKnight1 = new Knight("♘", 1, 1, 7,  "w");
    Bishop bBishop1 = new Bishop("♗", 1, 2, 7,  "w");
    Queen bQueen = new Queen("♕", 1, 3, 7,  "w");
    King bKing = new King("♔", 1, 4, 7,  "w");
    Bishop bBishop2 = new Bishop("♗", 2, 5, 7,  "w");
    Knight bKnight2 = new Knight("♘", 2, 6, 7,  "w");
    Rook bRook2 = new Rook("♖", 2, 7, 7,  "w");

    Peice bPawn1 = new Pawn("♙", 1, 0, 6,  "w");
    Peice bPawn2 = new Pawn("♙", 2, 1, 6,  "w");
    Peice bPawn3 = new Pawn("♙", 3, 2, 6,  "w");
    Peice bPawn4 = new Pawn("♙", 4, 3, 6,  "w");
    Peice bPawn5 = new Pawn("♙", 5, 4, 6,  "w");
    Peice bPawn6 = new Pawn("♙", 6, 5, 6,  "w");
    Peice bPawn7 = new Pawn("♙", 7, 6, 6,  "w");
    Peice bPawn8 = new Pawn("♙", 8, 7, 6,  "w");
    public void updateBoardState(int x, int y, int oldx, int oldy, Peice newP){//method to update the appearance of board
        //Important (This method  does not change any positions or object data, only the board appearance)
        boardState[oldy][oldx]="";
        squares[oldy][oldx].setText("");
        if (newP != null && !newP.color.isEmpty()){
            boardState[y][x]=newP.getcolor();
            squares[y][x].setText(newP.getcolor());
        }else {
            boardState[y][x]="";
            squares[y][x].setText("");
        }
    }
    ChessReview(){
        frame = new JFrame("Chewy's Chess Game");
        frame.setSize(SQUARE_SIZE * BOARD_SIZE, SQUARE_SIZE * BOARD_SIZE);
        frame.setResizable(false);
        JPanel boardPanel = new JPanel(new GridLayout(BOARD_SIZE, BOARD_SIZE));

        squares = new JButton[BOARD_SIZE][BOARD_SIZE];
        boardState = new String[BOARD_SIZE][BOARD_SIZE];
        boardPanel.setFont(new Font("Arial", Font.BOLD, 100));
        Color c1 = new Color(0xFFEEEED2, true);//rgb colors
        Color c2 = new Color(0xFF769656, true);//I wanted to make the board look nice
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {//creates 8 by 8 buttons
                JButton square = new JButton();
                square.setPreferredSize(new Dimension(SQUARE_SIZE, SQUARE_SIZE));

                if ((row + col) % 2 == 0){
                    square.setBackground(c1);
                }else{
                    square.setBackground(c2);
                }
                square.addActionListener(this);
                squares[row][col] = square;
                boardPanel.add(square);
                boardState[row][col] = "";
            }
        }
        initializePieces();
        updateBoard();
        frame.add(boardPanel);
        frame.setVisible(true);

    }
    public void actionPerformed(ActionEvent e) {
        try (BufferedReader reader = new BufferedReader(new FileReader("SaveMoves"))) {

            for (int i = 0 ; i < skips; i ++){
                reader.readLine();
            }
            MovingPString = (reader.readLine().split(" "));//string split at space
            MovingXpos = Integer.parseInt(MovingPString[1]);//first number is x pos
            MovingYpos = Integer.parseInt(MovingPString[2]);//second number is y pos
            MovingPeice = getMovingP(MovingPString[0]);//find the moving piece
            boardState[MovingYpos][MovingXpos]="";
            squares[MovingYpos][MovingXpos].setText("");

            updateBoardState(MovingXpos, MovingYpos, MovingPeice.xPos, MovingPeice.yPos, MovingPeice);
            MovingPeice.MovePiece(MovingXpos, MovingYpos);
            skips++;
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(this, "Game ended", "Error", JOptionPane.ERROR_MESSAGE);
            frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));

        }

    }

    public Peice getMovingP(String p) {//finds the piece being moved
        if (p.equals("♙1")){
            return bPawn1;
        }if (p.equals("♙2")){
            return bPawn2;
        }if (p.equals("♙3")){
            return bPawn3;
        }if (p.equals("♙4")){
            return bPawn4;
        }if (p.equals("♙5")){
            return bPawn5;
        }if (p.equals("♙6")){
            return bPawn6;
        }if (p.equals("♙7")){
            return bPawn7;
        }if (p.equals("♙8")){
            return bPawn8;
        }if (p.equals("♘1")){
            return bKnight1;
        }if (p.equals("♘2")){
            return bKnight2;
        }if (p.equals("♗1")){
            return bBishop1;
        }if (p.equals("♗2")){
            return bBishop2;
        }if (p.equals("♖1")){
            return bRook1;
        }if (p.equals("♖2")){
            return bRook2;
        }if (p.equals("♕1")){
            return bQueen;
        }if (p.equals("♔1")){
            return bKing;
        }
        if (p.equals("♟1")){
            return wPawn1;
        }if (p.equals("♟2")){
            return wPawn2;
        }if (p.equals("♟3")){
            return wPawn3;
        }if (p.equals("♟4")){
            return wPawn4;
        }if (p.equals("♟5")){
            return wPawn5;
        }if (p.equals("♟6")){
            return wPawn6;
        }if (p.equals("♟7")){
            return wPawn7;
        }if (p.equals("♟8")){
            return wPawn8;
        }if (p.equals("♞1")){
            return wKnight1;
        }if (p.equals("♞2")){
            return wKnight2;
        }if (p.equals("♝1")){
            return wBishop1;
        }if (p.equals("♝2")){
            return wBishop2;
        }if (p.equals("♜1")){
            return wRook1;
        }if (p.equals("♜2")){
            return wRook2;
        }if (p.equals("♛1")){
            return wQueen;
        }if (p.equals("♚1")){
            return wKing;
        }
        return null;
    }

    private void updateBoard() {//used to set up the buttons and board after the piece are created
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                squares[row][col].setFont(new Font("", Font.PLAIN, 64));//sets font and size of pieces
                squares[row][col].setText(boardState[row][col]);
            }
        }
    }
    private void initializePieces() {

        Rook wRook1 = new Rook("♖", 1, 0, 0,  "w");
        Knight wKnight1 = new Knight("♘", 1, 1, 0,  "w");
        Bishop wBishop1 = new Bishop("♗", 1, 2, 0,  "w");
        Queen wQueen = new Queen("♕", 1, 3, 0,  "w");
        King wKing = new King("♔", 1, 4, 0,  "w");
        Bishop wBishop2 = new Bishop("♗", 2, 5, 0,  "w");
        Knight wKnight2 = new Knight("♘", 2, 6, 0,  "w");
        Rook wRook2 = new Rook("♖", 2, 7, 0,  "w");

        Peice wPawn1 = new Pawn("♙", 1, 0, 1,  "w");
        Peice wPawn2 = new Pawn("♙", 2, 1, 1,  "w");
        Peice wPawn3 = new Pawn("♙", 3, 2, 1,  "w");
        Peice wPawn4 = new Pawn("♙", 4, 3, 1,  "w");
        Peice wPawn5 = new Pawn("♙", 5, 4, 1,  "w");
        Peice wPawn6 = new Pawn("♙", 6, 5, 1,  "w");
        Peice wPawn7 = new Pawn("♙", 7, 6, 1,  "w");
        Peice wPawn8 = new Pawn("♙", 8, 7, 1,  "w");

        Rook bRook1 = new Rook("♜", 1, 0, 7,  "b");
        Knight bKnight1 = new Knight("♞", 1, 1, 7,  "b");
        Bishop bBishop1 = new Bishop("♝", 1, 2, 7,  "b");
        Queen bQueen = new Queen("♛", 1, 3, 7,  "b");
        King bKing = new King("♚", 1, 4, 7,  "b");
        Bishop bBishop2 = new Bishop("♝", 2, 5, 7,  "b");
        Knight bKnight2 = new Knight("♞", 2, 6, 7,  "b");
        Rook bRook2 = new Rook("♜", 2, 7, 7,  "b");

        Peice bPawn1 = new Pawn("♟", 1, 0, 6,  "b");
        Peice bPawn2 = new Pawn("♟", 2, 1, 6,  "b");
        Peice bPawn3 = new Pawn("♟", 3, 2, 6,  "b");
        Peice bPawn4 = new Pawn("♟", 4, 3, 6,  "b");
        Peice bPawn5 = new Pawn("♟", 5, 4, 6,  "b");
        Peice bPawn6 = new Pawn("♟", 6, 5, 6,  "b");
        Peice bPawn7 = new Pawn("♟", 7, 6, 6,  "b");
        Peice bPawn8 = new Pawn("♟", 8, 7, 6,  "b");

        boardState[0] = new String[]{bRook1.getcolor(), bKnight1.getcolor(), bBishop1.getcolor(), bQueen.getcolor(), bKing.getcolor(), bBishop2.getcolor(), bKnight2.getcolor(), bRook2.getcolor()};
        boardState[1] = new String[]{bPawn1.getcolor(), bPawn2.getcolor(), bPawn3.getcolor(), bPawn4.getcolor(), bPawn5.getcolor(), bPawn6.getcolor(), bPawn7.getcolor(), bPawn8.getcolor()};
        boardState[6] = new String[]{wPawn1.getcolor(), wPawn2.getcolor(), wPawn3.getcolor(), wPawn4.getcolor(), wPawn5.getcolor(), wPawn6.getcolor(), wPawn7.getcolor(), wPawn8.getcolor()};
        boardState[7] = new String[]{wRook1.getcolor(), wKnight1.getcolor(), wBishop1.getcolor(), wQueen.getcolor(), wKing.getcolor(), wBishop2.getcolor(), wKnight2.getcolor(), wRook2.getcolor()};
    }
}
